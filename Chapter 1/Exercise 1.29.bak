#lang sicp

(define (cube x) (* x x x))
(define (odd? n) (= (remainder n 2) 1))
(define (simpson-integral f a b n)
  (define (add-h x) (+ x (calc-h)))
  (define (calc-h) (/ (- b a) n))
  (* (sum f a add-h b 0 n)
     (/ (calc-h) 3)))
(define (sum term a next b i n)
  ((cond ((> a b) 0)
         ((or (= i 0) (= i n))
          (+ (term a) (sum term (next a) next b (+ i 1) n)))
         ((odd? i)
          (+ (* 4 (term a)) (sum term (next a) next b (+ i 1) n)))
         (else (+ (* 2 (term a)) (sum term (next a) next b (+ i 1) n))))))
(simpson-integral cube 0 1 2)